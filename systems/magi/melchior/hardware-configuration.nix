# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "ehci_pci"
    "ahci"
    "usb_storage"
    "usbhid"
    "sd_mod"
  ];

  # Added by nixos-installer; it lets you decrypt using a USB to hold keyfiles
  fileSystems."/mnt/keydrive" = {
    device = "LABEL=KEYDRIVE";
    fsType = "vfat";
    neededForBoot = true;
  };

  boot.initrd.postDeviceCommands = ''
    # Make mount point
    mkdir -p /mnt/keydrive

    # Wait until the drive is availabe
    sleep 10

    # Mount the keydrive
    mount -t auto LABEL=KEYDRIVE /mnt/keydrive
  '';
  boot.supportedFilesystems = [ "zfs" ]; # Added by nixos-installer; it enables zfs kernel mod
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "melchior-pool/backup/monthly/root";
    fsType = "zfs";
  };

  fileSystems."/var" = {
    device = "melchior-pool/backup/weekly/var";
    fsType = "zfs";
  };

  fileSystems."/srv" = {
    device = "melchior-pool/backup/weekly/srv";
    fsType = "zfs";
  };

  fileSystems."/home" = {
    device = "melchior-pool/backup/weekly/home";
    fsType = "zfs";
  };

  fileSystems."/root" = {
    device = "melchior-pool/backup/weekly/root-user";
    fsType = "zfs";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/F6E6-FEB0";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/f3c3dd85-b5ff-453d-923c-d7d753dab618"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno2.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
